[project]
name = "mcp-demo"
version = "0.1.0"
description = "Model Context Protocol Demo"
readme = "README.md"
authors = [{ name = "Ricardo Santos", email = "ricardo.santos.diaz@gmail.com" }]
requires-python = ">=3.12"
dependencies = [
    "mcp[cli]>=1.5.0",
    "psycopg[binary,pool]>=3.2.6",
    "pydantic>=2.10.6",
    "pydantic-settings>=2.8.1",
]

[dependency-groups]
dev = [
    "ipywidgets>=8.1.5",
    "jupyterlab>=4.3.6",
    "pyright>=1.1.398",
    "ruff>=0.11.2",
    "twine>=6.1.0",
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["src"]

[tool.ruff]
# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
    "gql",
]

# Assume Python 3.12
target-version = "py312"

lint.select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "C",  # flake8-comprehensions
    "B",  # flake8-bugbear
    "UP", # pyupgrade
]

lint.ignore = [
    "E501", # line too long, handled by black
    "B008", # do not perform function calls in argument defaults
    "C901", # too complex
    "W191", # indentation contains tabs
]

[tool.ruff.lint.isort]
known-third-party = ["pydantic"]

[tool.pyright]
typeCheckingMode = "standard"
pythonVersion = "3.12"
reportMissingImports = "error"
reportMissingTypeStubs = false
exclude = ["**/__pycache__"]
include = ["./src"]
requires-python = "<3.13,>=3.12"
